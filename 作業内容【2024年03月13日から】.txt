〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓
2024年02月27日(火)作業内容
　　下記のブランチを再度作成する。
		制御データ作成（feat/control-data-creation）
		git checkout -b feat/control-data-creation
　（１）バージョンを、1.0.3.0 とする。
		git commit -m "chore:バージョンを、1.0.3.0 とする"
		git commit -m "chore:Set the version to 1.0.3.0"
　（２）カゴ車のコンテナ数が1の時の吊札印字データ修正。
		git commit -m "fix:カゴ車のコンテナ数が1の時の吊札印字データ修正"
		git commit -m "fix:Corrected the hanging tag printing data when the number of containers in the basket car is 1"
　（３）積載数が30束以上の場合は半分の積載数で区分けフラグをオンにする。
		git commit -m "update:積載数が30束以上の場合は半分の積載数で区分けフラグをオンにする"
		git commit -m "update:If the number of loaded bundles is 30 or more, turn on the classification flag at half the number of loaded bundles."
　（４）運転開始時の使用不可ボタン追加。
		git commit -m "update:運転開始時の使用不可ボタン追加"
		git commit -m "update:Added unusable button when starting operation"

〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓
2024年02月28日(水)作業内容
　（１）修正内容の確認作業。
　　　　不具合（デグレート）確認したのでアプリ修正。
　　　　＜不具合内容＞
　　下記のブランチを再度作成する。
		制御データ作成（feat/control-data-creation）
		git checkout -b feat/control-data-creation
　（１）最大束数の半数で区分けフラグを立てる処理の修正。
		git commit -m "update:最大束数の半数で区分けフラグを立てる処理の修正"
		git commit -m "update:Corrected the process of setting a classification flag at half the maximum number of bundles."

〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓
2024年03月04日(月)作業内容
　　下記のブランチを新規作成する。
		制御データ作成（feat/control-data-creation）
		git checkout -b feat/control-data-creation
　（１）バージョンを、1.0.4.0 とする。
		git commit -m "chore:バージョンを、1.0.4.0 とする"
		git commit -m "chore:Set the version to 1.0.4.0"
　（２）1/2区分けする条件を変更。
		git commit -m "update:1/2区分けする条件を変更"
		git commit -m "update:Changed the conditions for 1/2 division"

〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓
2024年03月05日(火)作業内容
　　下記のブランチを新規作成する。
		制御データ作成（feat/control-data-creation）
		git checkout -b feat/control-data-creation
　（１）デバッグ用ログの削除。
		git commit -m "chore:デバッグ用ログの削除"
		git commit -m "chore:Deleting debug logs"
　（２）生産ログの日付が「00000000」の対応。
		git commit -m "update:生産ログの日付が「00000000」の対応"
		git commit -m "update:Correspondence when production log date is [00000000]"

〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓
2024年03月07日(木)作業内容
　　下記のブランチを新規作成する。
		丁合指示データ読込（feat/read-collation-instruction-data）
		git checkout -b feat/read-collation-instruction-data
　（１）バージョンを、1.0.5.0 とする。
		git commit -m "chore:バージョンを、1.0.5.0 とする"
		git commit -m "chore:Set the version to 1.0.5.0"
　（２）丁合指示データ読込時の企画回の2桁化対応。
		git commit -m "update:丁合指示データ読込時の企画回の2桁化対応"
		git commit -m "update:Support for 2-digit planning times when reading collation instruction data"

〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓
2024年03月08日(金)作業内容
　　下記のブランチを新規作成する。
		ダミーデータ付与（feat/add-dummy-data）
		git checkout -b feat/add-dummy-data
　（１）制御データの最後に生協変化時のダミーを追加。
		git commit -m "add:制御データの最後に生協変化時のダミーを追加"
		git commit -m "add:Added a dummy when the co-op changes at the end of the control data"
　（２）指示データの途中から制御データを作成する時のダミーデータ作成処理の修正。
		git commit -m "update:指示データの途中から制御データを作成する時のダミーデータ作成処理の修正"
		git commit -m "update:Corrected dummy data creation process when creating control data from the middle of instruction data"

〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓
2024年03月12日(火)作業内容
　　下記のブランチを新規作成する。
		生協・デポコードのメンテンナス（feat/co-op-and-depot-code-maintenance）
		git checkout -b feat/co-op-and-depot-code-maintenance
　（１）保守画面に生協・デポ一覧画面の追加。
		git commit -m "add:保守画面に生協・デポ一覧画面の追加"
		git commit -m "add:Addition of co-op/depot list screen to maintenance screen"
　（２）生協・デポ一覧ファイルの読込
		git commit -m "add:生協・デポ一覧ファイルの読込"
		git commit -m "add:Loading the co-op/depot list file"
　（３）生産ログチェック読込拡張子の設定変更。
		git commit -m "update:生産ログチェック読込拡張子の設定変更"
		git commit -m "update:Change settings for production log check reading extension"
　（４）重複ファイル受信時の処理修正。
		git commit -m "update:重複ファイル受信時の処理修正"
		git commit -m "update:Corrected processing when receiving duplicate files"
　（５）生協・デポ一覧タブの表示・非表示。
		git commit -m "update:生協・デポ一覧タブの表示・非表示"
		git commit -m "update:Showing/hiding the co-op/depot list tab"
　（６）ログ等の削除。
		git commit -m "chore:ログ等の削除"
		git commit -m "chore:Deletion of logs etc."

〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓
2024年03月13日(水)作業内容
　　下記のブランチを新規作成する。
		生協・デポ一覧保守（feat/co-op_depot-list-maintenance）
		git checkout -b feat/co-op_depot-list-maintenance
　（１）生協・デポ一覧の妥当性チェック。
		git commit -m "add:生協・デポ一覧の妥当性チェック"
		git commit -m "add:Validity check of co-op/depot list"
　（２）生協・デポ一覧のデータグリッド化。
		git commit -m "update:生協・デポ一覧のデータグリッド化"
		git commit -m "update:Data grid of co-op/depot list"
　（３）下記内容でマージリクエストする。
		下記処理内容の修正
			1.生協・デポ一覧の妥当性チェック。
			2.生協・デポ一覧のデータグリッド化。
		＜英語訳＞
		Modification of the following processing details
			1. Check the validity of the list of co-ops and depots.
			2. Data grid of co-op/depot list.

〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓
2024年03月14日（木）作業内容
　　下記のブランチで継続して作業。
		生協・デポ一覧保守（feat/co-op_depot-list-maintenance）
		git checkout -b feat/co-op_depot-list-maintenance
　（１）バージョンを、1.0.6.0 とする。
		git commit -m "chore:バージョンを、1.0.6.0 とする"
		git commit -m "chore:Set the version to 1.0.6.0"
　（２）データグリッドの行追加と行削除の実装。
		git commit -m "update:データグリッドの行追加と行削除の実装"
		git commit -m "update:Implementing data grid row addition and row deletion"
　（３）妥当性確認項目の追加。
		git commit -m "update:妥当性確認項目の追加"
		git commit -m "update:Addition of validation items"
　（４）アプリ終了時に最終生産ログを移動する。
		git commit -m "update:アプリ終了時に最終生産ログを移動する"
		git commit -m "update:Move final production log when app exits"
　（５）下記内容でマージリクエストする。
		下記処理内容の修正
			1.バージョンを、1.0.6.0 とする。
			2.データグリッドの行追加と行削除の実装。
			3.妥当性確認項目の追加。
			4.アプリ終了時に最終生産ログを移動する。
		＜英語訳＞
		Modification of the following processing details
			1. Set the version to 1.0.6.0.
			2. Implementation of data grid row addition and row deletion.
			3. Addition of validation items.
			4. Move the final production log when the app closes.

〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓
2024年03月15日（金）作業内容
　　下記のブランチを新規で作成。
		生協・デポ設定の妥当性確認（feat/validation-of-coop_and_depot-settings）
		git checkout -b feat/validation-of-coop_and_depot-settings
　（１）設定画面タイトルの変更。
		git commit -m "update:設定画面タイトルの変更"
		git commit -m "update:Changing the settings screen title"
　（２）保存確認メッセージ表示。
		git commit -m "update:保存確認メッセージ表示"
		git commit -m "update:Save confirmation message display"
　（３）妥当性チェック機能追加。
		git commit -m "update:妥当性チェック機能追加"
		git commit -m "update:Added validity check function"
　（４）アプリ終了時のログファイル移動処理。
		git commit -m "update:アプリ終了時のログファイル移動処理"
		git commit -m "update:Log file movement process when app ends"
　（５）下記内容でマージリクエストする。
		下記処理内容の修正
			1.設定画面タイトルの変更。
			2.保存確認メッセージ表示。
			3.妥当性チェック機能追加。
			4.アプリ終了時のログファイル移動処理。
		＜英語訳＞
		Modification of the following processing details
			1. Change the setting screen title.
			2. Save confirmation message displayed.
			3. Added validity check function.
			4. Log file movement process when app ends.

〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓
2024年03月24日(日)作業内容
　　下記のブランチを新規で作成。
		QRラベル印字（feat/QR-label-printing）
		git checkout -b feat/QR-label-printing
　（１）バージョンを、1.0.7.0 とする。
		git commit -m "chore:バージョンを、1.0.7.0 とする"
		git commit -m "chore:Set the version to 1.0.7.0"
　（２）印刷中ダイアログを表示しないようにする。
		git commit -m "update:印刷中ダイアログを表示しないようにする"
		git commit -m "update:Prevent printing dialog from being displayed"
　（３）下記内容でマージリクエストする。
		下記処理内容の修正
			1.バージョンを、1.0.7.0 とする。
			2.印刷中ダイアログを表示しないようにする。
		＜英語訳＞
		Modification of the following processing details
			1. Set the version to 1.0.7.0.
			2. Do not display the printing dialog.

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
下記のブランチを新規で作成。
	生産実績表示（feat/production-performance-display）
	git checkout -b feat/production-performance-display
【2024年03月26日（火）】
　（１）バージョンを、1.0.8.0 とする。
		git commit -m "chore:バージョンを、1.0.8.0 とする"
		git commit -m "chore:Set the version to 1.0.8.0"
　（２）実績表示を00時から表示とする。
		git commit -m "update:実績表示を00時から表示とする"
		git commit -m "update:Display results from 00:00"
【2024年03月29日(金)】
　（１）実績表示を00時から表示とする。　（3/26(火)作業済み）
		git commit -m "update:実績表示を00時から表示とする"
		git commit -m "update:Display results from 00:00"
　（２）最終イベントファイルが二日以上にまたがる場合にFROM～TO
　　　　の日付を表示する様に修正。
【2024年04月01日(月)】
　（１）2日以上のログのFROMｰTO表示の修正。
		git commit -m "update:2日以上のログのFROMｰTO表示の修正"
		git commit -m "update:Corrected FROM-TO display for logs longer than 2 days"
　（２）2日以上のログを分割する処理。
		git commit -m "update:2日以上のログを分割する処理"
		git commit -m "update:Processing to split logs of 2 days or more"
　（３）生産実績ログ日付表示処理修正。
		git commit -m "update:生産実績ログ日付表示処理修正"
		git commit -m "update:Production performance log date display processing correction"
【2024年04月03日(水)】
　（１）ファイル分割処理で確認ダイアログ表示。
		git commit -m "update:ファイル分割処理で確認ダイアログ表示"
		git commit -m "update:Confirmation dialog displayed during file splitting process"
　（２）分割処理後に作成ファイル名表示。
		git commit -m "update:分割処理後に作成ファイル名表示"
		git commit -m "update:Display created file name after splitting process"
　（３）生産実績閲覧画面のテスト作業。
　　　　ログ内容の日付が、3日間に渡る場合の処理確認。
【2024年04月05日(金)】
　（１）ラベル印字処理の例外処理修正。
		git commit -m "update:ラベル印字処理の例外処理修正"
		git commit -m "update:Fixed exception handling in label printing process."
		下記メソッドの例外処理の修正。
		PrintShippingLabel
		PrintHangingTag
【2024年04月08日(月)】
　（１）ラベル印字処理のデバッグログ追加。
		git commit -m "chore:ラベル印字処理のデバッグログ追加"
		git commit -m "chore:Added debug log for label printing process"
		＜下記ラベル印刷のデバッグメッセージ埋め込み＞
		（１）自動判定モードの「OK処理」
		　　　CommonModule.OutPutLogFile("【ラベル印字デバッグ】自動判定モードの「OK処理」");
		（２）NG束リストの「OK処理」
		　　　CommonModule.OutPutLogFile("【ラベル印字デバッグ】NG束リストの「OK処理」");
		（３）OK束リストの「OK処理」※通常の処理
		　　　CommonModule.OutPutLogFile("【ラベル印字デバッグ】OK束リストの「OK処理」");
		　　　　↓↓↓下記のメッセージで代用する↓↓↓
				CommonModule.OutPutLogFile($"■（CheckWorkCode：ＯＫリスト）ReadCollatingDataForm.sPrtOutputSerialNumber：{ReadCollatingDataForm.sPrtOutputSerialNumber}");
				CommonModule.OutPutLogFile($"■（CheckWorkCode：ＯＫリスト）ラベル印字終了：{strChkData}Y0101000001");
		（４）外部印刷ボタン処理
		　　　CommonModule.OutPutLogFile("【ラベル印字デバッグ】外部印字ボタンによる出荷ラベル印字");
		（５）「出荷ﾗﾍﾞﾙ再印刷」ボタン
		　　　CommonModule.OutPutLogFile("【ラベル印字デバッグ】「出荷ﾗﾍﾞﾙ再印刷」ボタン");
【2024年04月16日(火)】
　※ラベル印字の（配布曜日・配布方面・配布方面Ｎｏ）のフォントを３６Pとする。
　　その資料を作成する。ソースもこの時に修正する。
　（１）下記データの追加。
　　　　・ラベル印字印字サイズ変更.xlsx
		git commit -m "add:資料「ラベル印字印字サイズ変更.xlsx」の追加"
【2024年05月08日(水)】
　（１）テスト用生産ログ作成処理修正。
		git commit -m "update:テスト用生産ログ作成処理修正"
		git commit -m "update:Corrected test production log creation process"
　（２）出荷ラベル印字文字の変更。
　　　※4/16(火)変更分をコミットする。
		git commit -m "update:出荷ラベル印字文字の変更"
		git commit -m "update:Changing shipping label printing characters"
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓
2024年05月24日(金)作業内容
　　　下記のブランチの新規作成。
		実績ログ表示画面（feat/achievement-log-display-screen）
		git checkout -b feat/achievement-log-display-screen
　（１）実績ログ表示画面に「生産数と残数」の円グラフ表示追加。
		git commit -m "add:実績ログ表示画面に「生産数と残数」の円グラフ表示追加"

〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓
2024年05月25日(土)作業内容
　　　下記のブランチを再度作成する。
		実績ログ表示画面（feat/achievement-log-display-screen）
		git checkout -b feat/achievement-log-display-screen
　（１）フィーダー実績と帳票実績の棒グラフ追加。
		git commit -m "add:フィーダー実績と帳票実績の棒グラフ追加"

〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓
2024年05月26日(日)作業内容
　　　下記のブランチで継続して作業する。
		実績ログ表示画面（feat/achievement-log-display-screen）
		git checkout -b feat/achievement-log-display-screen
　（１）フィーダーNG数と帳票NG数の棒グラフを追加。
		git commit -m "add:フィーダーNG数と帳票NG数の棒グラフを追加"

〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓
2024年05月27日(月)作業内容
　　　下記のブランチで継続して作業する。
		実績ログ表示画面（feat/achievement-log-display-screen）
		git checkout -b feat/achievement-log-display-screen
　（１）稼働状況モニタに表示データの「保存」処理追加。
		git commit -m "add:稼働状況モニタに表示データの「保存」処理追加"
　（２）稼働状況モニタに表示データの「読込」処理追加。
		git commit -m "add:稼働状況モニタに表示データの「読込」処理追加"

〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓
2024年05月28日(火)作業内容
　　　下記のブランチで継続して作業する。
		実績ログ表示画面（feat/achievement-log-display-screen）
		git checkout -b feat/achievement-log-display-screen
　（１）稼働状況表示画面にメッセージ表示領域を追加。
		git commit -m "add:稼働状況表示画面にメッセージ表示領域を追加"

〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓
2024年05月29日(水)作業内容
　　　下記のブランチを再度作成して作業する。
		実績ログ表示画面（feat/achievement-log-display-screen）
		git checkout -b feat/achievement-log-display-screen
　（１）稼働状況画面のステータスメッセージを変更する処理を追加。
		git commit -m "add:稼働状況画面のステータスメッセージを変更する処理を追加"

〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓
2024年05月31日(金)作業内容
　　　下記のブランチで継続して作業する。
		生産実績詳細画面（feat/production-results-details-screen）
		git checkout -b feat/production-results-details-screen
　（１）生産実績詳細画面を「表形式」「グラフ形式」の二つのタブに分ける。
		git commit -m "add:生産実績詳細画面を「表形式」「グラフ形式」の二つのタブに分ける"
　（２）表形式で算出した値をグラフ形式の設定値とする。
		git commit -m "add:表形式で算出した値をグラフ形式の設定値とする"

〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓
2024年06月01日(土)作業内容
　　　下記のブランチを新規作成して作業する。
		生産実績（feat/actual-production）
		git checkout -b feat/actual-production
　（１）フィーダー及び帳票のグラフタイトル文言変更。
		git commit -m "update:フィーダー及び帳票のグラフタイトル文言変更"

〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓
2024年06月02日(日)作業内容
　（１）ラベル印字されない不具合の調査。
　　　→ ラベル印字部分のコードを見直してみた。
　　　→ 詳細なデバッグ文を埋め込んで経過観察する？
　　　→ プリンタと接続しているUSBケーブルが長すぎる？
　　　　　※ USBケーブルの型番を教えてもらう。
　（２）下記のブランチを新規作成して作業する。
		ラベル印字されない不具合（fix/label-not-printing-issue）
		git checkout -b fix/label-not-printing-issue
　（３）フィーダー及び帳票のグラフタイトル文言変更。
		git commit -m "update:フィーダー及び帳票のグラフタイトル文言変更"

〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓
2024年06月03日(月)作業内容
　→ ラベル印字されない事がある不具合の調査。
　　下記のブランチで継続して作業する。
		ラベル印字されない不具合（fix/label-not-printing-issue）
		git checkout -b fix/label-not-printing-issue
　（１）生産ログ作成テストのタイマーを1秒に変更。
		git commit -m "fix:生産ログ作成テストのタイマーを1秒に変更"
　（２）不具合調査の為のデバッグ文の埋め込み。
		git commit -m "fix:不具合調査の為のデバッグ文の埋め込み"
　（３）ラベル印字文字の大きさを現行の大きさに戻す。
		git commit -m "update:ラベル印字文字の大きさを現行の大きさに戻す"
　（４）バージョンを「Ver.1.0.9.0」とする。
		git commit -m "update:バージョンを「Ver.1.0.9.0」とする"

〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓
2024年06月04日(火)作業内容
　→ ラベル印字されない事がある不具合の調査。
　　下記のブランチで継続して作業する。
		ラベル印字処理の改良（fix/improved-label-printing-process）
		git checkout -b fix/improved-label-printing-process
　（１）ReadCollatingDataForm から PrintShippingLabelDoc コントロールの削除。
		git commit -m "update:ReadCollatingDataForm から PrintShippingLabelDoc コントロールの削除"
　（２）指示データ読込画面のラベル印字処理を共通モジュールへ移動。
		git commit -m "update:指示データ読込画面のラベル印字を共通モジュールへ移動"
　（３）QR読込時のラベル印字処理を運転画面に実装。
		git commit -m "update:QR読込時のラベル印字処理を運転画面に実装"
　（４）QR手直し商品登録画面のQRデータ取得処理修正（デバッグ用）。
		git commit -m "update:QR手直し商品登録画面のQRデータ取得処理修正（デバッグ用）"
　（５）メイン画面のQR表示ボタン処理の修正（デバッグ用）。
		git commit -m "update:メイン画面のQR表示ボタン処理の修正（デバッグ用）"
	--------------------------------------------------------------------------------
	【修正箇所】
	（１）CommonModule.cs
	　　① PrintShippingLabel_PrinterWithRuledLine
			出荷ラベル印刷（罫線あり）（QR印字なし）（ジャーナルプリンタ）
			ReadCollatingDataForm で定義された変数を参照しない様にする。
			CommonModlue.cs内で定義した変数を参照する。
	　　② PrintShippingLabel_PrinterWithRuledLine_WithQR
			出荷ラベル印刷（罫線あり）（QR印字あり）（ジャーナルプリンタ）
			ReadCollatingDataForm で定義された変数を参照しない様にする。
			CommonModlue.cs内で定義した変数を参照する。
	　　③ PrintShippingLabel_PrinterWithRuledLine_02
			出荷ラベル印刷（罫線あり）（ジャーナルプリンタ）
			ReadCollatingDataForm で定義された変数を参照しない様にする。
			CommonModlue.cs内で定義した変数を参照する。
	　　④ PrintShippingLabel_Printer
			出荷ラベル印刷（ジャーナルプリンタ）
			ReadCollatingDataForm で定義された変数を参照しない様にする。
			CommonModlue.cs内で定義した変数を参照する。
	　　⑤ PrintShippingLabel_Mock
			出荷ラベル印刷（モック）
			ReadCollatingDataForm で定義された変数を参照しない様にする。
			CommonModlue.cs内で定義した変数を参照する。
	　　⑥ PrintShippingLabelDoc_PrintPage
			出荷ラベル印字
			ReadCollatingDataForm から移動。
			出荷ラベル用フォントもReadCollatingDataForm から移動。
		ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
		＜同じ変数が、2か所で定義されている＞
			CommonModlue 内の定義
			public static string sLastUnionNumber;　→ sLastUnionNumberForLabelPrint に変更。
			PubConstClass 内の定義
			public static string sLastUnionNumber = "";
		ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
	　　⑦ GetPrintDataOfRollBox
			出荷ラベル印刷データの取得処理
			ReadCollatingDataForm から移動。
			出荷ラベル印刷用変数もReadCollatingDataForm から移動。
	--------------------------------------------------------------------------------

〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓
2024年06月05日(水)作業内容
　→ ラベル印字されない事がある不具合の対策。
　　下記のブランチで継続して作業する。
		ラベル印字処理の改良（fix/improved-label-printing-process）
		git checkout -b fix/improved-label-printing-process
　（１）運転画面のラベル印字処理をロックする。
		git commit -m "update:運転画面のラベル印字処理をロックする"

〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓
2024年06月06日(木)作業内容
　→ ラベル印字されない事がある不具合の対策。
　→ 下記のテスト作業。
　（１）再印刷処理が正しく出来る事。
　（２）帳票のQR読込でラベル印字処理が正しく出来る事。
　（３）カゴ車確認画面で吊札のQR読込→ラベルQR読込でカゴ車判定が正しく出来る事。
　（４）QR手直し商品登録が正しく出来る事。
　（５）外部印字SWでラベルの連続印字が正しく出来る事。

〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓
2024年06月07日(金)作業内容
　→ ラベル印字されない事がある不具合の対策。
　→ 下記のテスト作業。
　（１）メイン画面のデバッグモードで「QRコード表示」ボタンクリックで
　　　　ラベル印字される事（帳票ID＝Zとなる）。
　（２）出荷ラベル照合モードの確認。
　　　　セット帳票QRと出荷ラベルQRを照合する。
　（３）QR手直し商品登録画面のデバックモードで「QRコード表示」ボタン
　　　　クリックでラベル印字される事（帳票ID=選択した項目に従う）

〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓
2024年06月10日(月)作業内容
	git commit -m "add:GCアプリ「Ver.1.0.8.0（欠番）」の追加"
	git commit -m "add:GCアプリ「Ver.1.0.9.0」の追加"
	git commit -m "update:README.md 更新"

〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓
2024年06月24日(月)作業内容
	git commit -m "add:GCアプリ「Ver.1.0.9.1」の追加"
	git commit -m "update:README.md 更新"
	git commit -m "update:作業内容【2024年03月13日から】.txt 更新"

〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓
2024年08月02日(金)作業内容
　→ 下記の資料追加。
　（１）01_印字SW結線図.pdf
		git commit -m "add:資料「01_印字SW結線図.pdf」の追加"
　（２）02_印字SW単体動作確認.pdf
		git commit -m "add:資料「02_印字SW単体動作確認.pdf」の追加"
　（３）03_印字SWアプリ動作確認.pdf
		git commit -m "add:資料「03_印字SWアプリ動作確認.pdf」の追加"
　（４）README更新。
		git commit -m "update:README.md 更新"

〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓
2024年08月06日(火)作業内容
	git commit -m "add:GCアプリ「Ver.1.0.10.0」の追加"
	git commit -m "update:README.md 更新"
	git commit -m "update:作業内容【2024年03月13日から】.txt 更新"

〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓
2024年08月07日(水)作業内容
	git commit -m "add:資料「ラベル印字不良.pdf」の追加"

〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓
2024年12月05日(木)作業内容
	git commit -m "add:資料「グリーンコープ様向け_生産管理PC取扱説明書.pdf」の追加"

〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓
2024年12月09日(月)作業内容
	git commit -m "add:GCアプリ「Ver.1.0.11.0」の追加"
	git commit -m "add:資料「判定が未印字となるケース.pdf」の追加"

	git commit -m "update:README.mdの更新"
	git commit -m "update:2024年12月05日(木)の作業内容更新"

〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓
2024年12月11日(水)作業内容
　　サンシャインワークスさんでアプリ起動時に過去のログファイル等の
　　削除処理でシステムエラー表示となるファイルを表示させるテスト
　　アプリの作成。→ GreenCoopApp_test._
	git commit -m "add:テスト用GCアプリ「Ver.1.0.11.0」の追加"

	git commit -m "update:2024年12月05日(木)の作業内容更新"

以上。
